{"ast":null,"code":"import _slicedToArray from \"/Users/ouhao/ohh/react-hooks-ohh/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/ouhao/ohh/react-hooks-ohh/src/hooks/03_useEffect.js\";\nimport React, { useState, useEffect } from 'react';\nexport function HookUseEffect() {\n  const _useState = useState('inke'),\n        _useState2 = _slicedToArray(_useState, 2),\n        inke = _useState2[0],\n        setInke = _useState2[1];\n\n  const _useState3 = useState(0),\n        _useState4 = _slicedToArray(_useState3, 2),\n        count = _useState4[0],\n        setCount = _useState4[1]; // const [other, setOther] = useState(0)\n\n  /**\n   * useEffect（代替生命周期）\n   * @param {Function} 必选 callback\n   * @param {Array} 可选 \n   * 1.不传：每次渲染时都调用\n   * 2.传[]：commponentDidMount&componentDidUpdate的时候调用\n   * 3.传[state]: state改变时调用\n   * 注意：state不能为引用类型，引用类型比较不出来数据的变化，会造成死循环。\n   */\n\n\n  useEffect(() => {\n    changeColor();\n  }, [count]);\n\n  const changeColor = () => {\n    setInke(inke + '哈');\n  };\n\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26\n    },\n    __self: this\n  }, React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27\n    },\n    __self: this\n  }, inke), React.createElement(\"button\", {\n    onClick: () => setCount(count + 1),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28\n    },\n    __self: this\n  }, \"change\"));\n} // 传入的第一个参数，可以 return 一个函数，在组件被销毁时，会自动执行这个函数。\n\nexport function HookUseEffectReturn() {\n  const _useState5 = useState(true),\n        _useState6 = _slicedToArray(_useState5, 2),\n        isShow = _useState6[0],\n        setIsShow = _useState6[1];\n\n  useEffect(() => {\n    // 给window绑定点击事件\n    window.addEventListener('click', handleClick);\n    return () => {\n      // 给window移除点击事件\n      window.addEventListener('click', handleClick);\n    };\n  });\n\n  const handleClick = () => {\n    console.log('鼠标点击');\n  };\n\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52\n    },\n    __self: this\n  }, isShow && React.createElement(React.Fragment, null));\n}","map":{"version":3,"sources":["/Users/ouhao/ohh/react-hooks-ohh/src/hooks/03_useEffect.js"],"names":["React","useState","useEffect","HookUseEffect","inke","setInke","count","setCount","changeColor","HookUseEffectReturn","isShow","setIsShow","window","addEventListener","handleClick","console","log"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AAEA,OAAO,SAASC,aAAT,GAA0B;AAAA,oBACPF,QAAQ,CAAC,MAAD,CADD;AAAA;AAAA,QACxBG,IADwB;AAAA,QAClBC,OADkB;;AAAA,qBAELJ,QAAQ,CAAC,CAAD,CAFH;AAAA;AAAA,QAExBK,KAFwB;AAAA,QAEjBC,QAFiB,kBAG/B;;AAEA;;;;;;;;;;;AASAL,EAAAA,SAAS,CAAC,MAAM;AACdM,IAAAA,WAAW;AACZ,GAFQ,EAEN,CAACF,KAAD,CAFM,CAAT;;AAIA,QAAME,WAAW,GAAG,MAAM;AACxBH,IAAAA,OAAO,CAACD,IAAI,GAAG,GAAR,CAAP;AACD,GAFD;;AAIA,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAIA,IAAJ,CADF,EAEE;AAAQ,IAAA,OAAO,EAAE,MAAMG,QAAQ,CAACD,KAAK,GAAG,CAAT,CAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAFF,CADF;AAMD,C,CAED;;AACA,OAAO,SAASG,mBAAT,GAAgC;AAAA,qBAETR,QAAQ,CAAC,IAAD,CAFC;AAAA;AAAA,QAE9BS,MAF8B;AAAA,QAEtBC,SAFsB;;AAIrCT,EAAAA,SAAS,CAAC,MAAM;AACd;AACAU,IAAAA,MAAM,CAACC,gBAAP,CAAwB,OAAxB,EAAiCC,WAAjC;AAEA,WAAO,MAAM;AACX;AACAF,MAAAA,MAAM,CAACC,gBAAP,CAAwB,OAAxB,EAAiCC,WAAjC;AACD,KAHD;AAID,GARQ,CAAT;;AAUA,QAAMA,WAAW,GAAG,MAAM;AACxBC,IAAAA,OAAO,CAACC,GAAR,CAAY,MAAZ;AACD,GAFD;;AAIA,SAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAEHN,MAAM,IAAI,yCAFP,CAAP;AAKD","sourcesContent":["import React, { useState, useEffect } from 'react'\n\nexport function HookUseEffect () {\n  const [inke, setInke] = useState('inke')\n  const [count, setCount] = useState(0)\n  // const [other, setOther] = useState(0)\n\n  /**\n   * useEffect（代替生命周期）\n   * @param {Function} 必选 callback\n   * @param {Array} 可选 \n   * 1.不传：每次渲染时都调用\n   * 2.传[]：commponentDidMount&componentDidUpdate的时候调用\n   * 3.传[state]: state改变时调用\n   * 注意：state不能为引用类型，引用类型比较不出来数据的变化，会造成死循环。\n   */\n  useEffect(() => {\n    changeColor()\n  }, [count])\n\n  const changeColor = () => {\n    setInke(inke + '哈')\n  }\n\n  return (\n    <div>\n      <p>{inke}</p>\n      <button onClick={() => setCount(count + 1)}>change</button>\n    </div>\n  )\n}\n\n// 传入的第一个参数，可以 return 一个函数，在组件被销毁时，会自动执行这个函数。\nexport function HookUseEffectReturn () {\n\n  const [isShow, setIsShow] = useState(true)\n\n  useEffect(() => {\n    // 给window绑定点击事件\n    window.addEventListener('click', handleClick)\n\n    return () => {\n      // 给window移除点击事件\n      window.addEventListener('click', handleClick)\n    }\n  })\n\n  const handleClick = () => {\n    console.log('鼠标点击')\n  }\n\n  return <div>\n    {\n      isShow && <></>\n    }\n  </div>\n}\n"]},"metadata":{},"sourceType":"module"}