{"ast":null,"code":"import React, { useReducer, useContext, useMemo, useCallback, useRef, useEffect, useLayoutEffect } from 'react';\nimport { reducer, initialState } from \"./reducers\";\nimport { RESET, ADD } from './constant'; // export default function Counter () {\n//   /**\n//    * useReducer（代替redux）如果页面state复杂（state是一个对象或者state非常多散落在各处）\n//    * @param {Function} 必选 reducer函数\n//    * @param {any} 初始化的state\n//    */\n//   const [state, dispatch] = useReducer(reducer, initialState)\n//   return (\n//     <div>\n//       <p>{state.count}</p>\n//       <button onClick={() => dispatch({ type: RESET })}>Reset</button>\n//       <button onClick={() => dispatch({ type: ADD })}>+</button>\n//     </div>\n//   )\n// }\n\nexport default function Index() {\n  /**\n   * useLayoutEffect 在渲染之前执行\n   */\n  useLayoutEffect(() => {\n    const rootEl = document.getElementById('root');\n    console.log(rootEl);\n  });\n  return 123;\n} // import ChildApp from './childApp'\n// export const MyContext = React.createContext()\n// export default function Index (props) {\n//   return (\n//     <MyContext.Provider value='inke'>\n//       <ChildApp />\n//     </MyContext.Provider>\n//   )\n// }","map":{"version":3,"sources":["/Users/ouhao/inke/react-hooks/src/App.js"],"names":["React","useReducer","useContext","useMemo","useCallback","useRef","useEffect","useLayoutEffect","reducer","initialState","RESET","ADD","Index","rootEl","document","getElementById","console","log"],"mappings":"AAAA,OAAOA,KAAP,IAAgBC,UAAhB,EAA4BC,UAA5B,EAAwCC,OAAxC,EAAiDC,WAAjD,EAA8DC,MAA9D,EAAsEC,SAAtE,EAAiFC,eAAjF,QAAwG,OAAxG;AACA,SAASC,OAAT,EAAkBC,YAAlB,QAAsC,YAAtC;AACA,SAASC,KAAT,EAAgBC,GAAhB,QAA2B,YAA3B,C,CAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA,eAAe,SAASC,KAAT,GAAkB;AAC/B;;;AAGAL,EAAAA,eAAe,CAAC,MAAM;AACpB,UAAMM,MAAM,GAAGC,QAAQ,CAACC,cAAT,CAAwB,MAAxB,CAAf;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAYJ,MAAZ;AACD,GAHc,CAAf;AAKA,SAAO,GAAP;AACD,C,CAID;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import React, { useReducer, useContext, useMemo, useCallback, useRef, useEffect, useLayoutEffect } from 'react'\nimport { reducer, initialState } from \"./reducers\"\nimport { RESET, ADD } from './constant'\n\n// export default function Counter () {\n//   /**\n//    * useReducer（代替redux）如果页面state复杂（state是一个对象或者state非常多散落在各处）\n//    * @param {Function} 必选 reducer函数\n//    * @param {any} 初始化的state\n//    */\n//   const [state, dispatch] = useReducer(reducer, initialState)\n\n//   return (\n//     <div>\n//       <p>{state.count}</p>\n//       <button onClick={() => dispatch({ type: RESET })}>Reset</button>\n//       <button onClick={() => dispatch({ type: ADD })}>+</button>\n//     </div>\n//   )\n// }\n\n\nexport default function Index () {\n  /**\n   * useLayoutEffect 在渲染之前执行\n   */\n  useLayoutEffect(() => {\n    const rootEl = document.getElementById('root')\n    console.log(rootEl)\n  })\n\n  return 123\n}\n\n\n\n// import ChildApp from './childApp'\n// export const MyContext = React.createContext()\n\n// export default function Index (props) {\n\n//   return (\n//     <MyContext.Provider value='inke'>\n//       <ChildApp />\n//     </MyContext.Provider>\n//   )\n// }\n"]},"metadata":{},"sourceType":"module"}