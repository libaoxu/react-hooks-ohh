{"ast":null,"code":"import _slicedToArray from \"/Users/ouhao/inke/react-hooks/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/ouhao/inke/react-hooks/src/reducers/index.js\";\nimport React, { useReducer } from \"react\";\nimport { RESET, ADD } from \"../constant\";\nconst initialState = 0;\nexport const myContext = React.createContext();\nexport function reducer(state, action) {\n  switch (action.type) {\n    case RESET:\n      return initialState;\n\n    case ADD:\n      return {\n        count: state.count + 1\n      };\n\n    default:\n      return state;\n  }\n}\nexport const ContextProvider = props => {\n  const _useReducer = useReducer(reducer, {\n    count: 0\n  }),\n        _useReducer2 = _slicedToArray(_useReducer, 2),\n        state = _useReducer2[0],\n        dispatch = _useReducer2[1];\n\n  console.log(state, dispatch);\n  return React.createElement(myContext.Provider, {\n    value: {\n      state,\n      dispatch\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23\n    },\n    __self: this\n  }, props.children);\n};","map":{"version":3,"sources":["/Users/ouhao/inke/react-hooks/src/reducers/index.js"],"names":["React","useReducer","RESET","ADD","initialState","myContext","createContext","reducer","state","action","type","count","ContextProvider","props","dispatch","console","log","children"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,UAAhB,QAAkC,OAAlC;AACA,SAASC,KAAT,EAAgBC,GAAhB,QAA2B,aAA3B;AAEA,MAAMC,YAAY,GAAG,CAArB;AACA,OAAO,MAAMC,SAAS,GAAGL,KAAK,CAACM,aAAN,EAAlB;AAEP,OAAO,SAASC,OAAT,CAAkBC,KAAlB,EAAyBC,MAAzB,EAAiC;AACtC,UAAQA,MAAM,CAACC,IAAf;AACE,SAAKR,KAAL;AACE,aAAOE,YAAP;;AACF,SAAKD,GAAL;AACE,aAAO;AAAEQ,QAAAA,KAAK,EAAEH,KAAK,CAACG,KAAN,GAAc;AAAvB,OAAP;;AACF;AACE,aAAOH,KAAP;AANJ;AAQD;AAED,OAAO,MAAMI,eAAe,GAAGC,KAAK,IAAI;AAAA,sBACZZ,UAAU,CAACM,OAAD,EAAU;AAAEI,IAAAA,KAAK,EAAE;AAAT,GAAV,CADE;AAAA;AAAA,QAC/BH,KAD+B;AAAA,QACxBM,QADwB;;AAEtCC,EAAAA,OAAO,CAACC,GAAR,CAAYR,KAAZ,EAAmBM,QAAnB;AAEA,SACE,oBAAC,SAAD,CAAW,QAAX;AAAoB,IAAA,KAAK,EAAE;AAAEN,MAAAA,KAAF;AAASM,MAAAA;AAAT,KAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGD,KAAK,CAACI,QADT,CADF;AAKD,CATM","sourcesContent":["import React, { useReducer } from \"react\"\nimport { RESET, ADD } from \"../constant\"\n\nconst initialState = 0\nexport const myContext = React.createContext()\n\nexport function reducer (state, action) {\n  switch (action.type) {\n    case RESET: \n      return initialState\n    case ADD:\n      return { count: state.count + 1 }\n    default: \n      return state\n  }\n}\n\nexport const ContextProvider = props => {\n  const [state, dispatch] = useReducer(reducer, { count: 0 })\n  console.log(state, dispatch)\n\n  return (\n    <myContext.Provider value={{ state, dispatch }}>\n      {props.children}\n    </myContext.Provider>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}