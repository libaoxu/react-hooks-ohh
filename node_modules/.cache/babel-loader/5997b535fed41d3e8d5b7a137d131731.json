{"ast":null,"code":"import React, { useReducer, useContext, useMemo, useCallback } from 'react';\nimport { reducer, initialState } from \"./reducers\";\nimport { RESET, ADD } from './constant'; // export default function Counter () {\n//   /**\n//    * useReducer（代替redux）如果页面state复杂（state是一个对象或者state非常多散落在各处）\n//    * @param {Function} 必选 reducer函数\n//    * @param {any} 初始化的state\n//    */\n//   const [state, dispatch] = useReducer(reducer, initialState)\n//   return (\n//     <div>\n//       <p>{state.count}</p>\n//       <button onClick={() => dispatch({ type: RESET })}>Reset</button>\n//       <button onClick={() => dispatch({ type: ADD })}>+</button>\n//     </div>\n//   )\n// }\n\nexport default function Index() {\n  /**\n   * useCallback 适用于耗时的计算，复杂的业务逻辑（返回值是函数）\n   * @param {Function} 必选 callback\n   * @param {Array} 可选 \n   * 1.不传：每次组件渲染时都调用\n   * 2.传[]：一开始的时候调用\n   * 3.传[state]: state改变时调用\n   */\n  const obj1 = {\n    id: 12,\n    name: 'ouhao',\n    age: '22'\n  };\n  const obj2 = {\n    id: 13,\n    name: 'huimeng'\n  };\n  const memoizedFn = useCallback(() => {\n    return Object.assign(obj1, obj2);\n  }, [obj1, obj2]);\n  console.log(memoizedFn());\n  return 123;\n} // import ChildApp from './childApp'\n// export const MyContext = React.createContext()\n// export default function Index (props) {\n//   return (\n//     <MyContext.Provider value='inke'>\n//       <ChildApp />\n//     </MyContext.Provider>\n//   )\n// }","map":{"version":3,"sources":["/Users/ouhao/inke/react-hooks/src/App.js"],"names":["React","useReducer","useContext","useMemo","useCallback","reducer","initialState","RESET","ADD","Index","obj1","id","name","age","obj2","memoizedFn","Object","assign","console","log"],"mappings":"AAAA,OAAOA,KAAP,IAAgBC,UAAhB,EAA4BC,UAA5B,EAAwCC,OAAxC,EAAiDC,WAAjD,QAAoE,OAApE;AACA,SAASC,OAAT,EAAkBC,YAAlB,QAAsC,YAAtC;AACA,SAASC,KAAT,EAAgBC,GAAhB,QAA2B,YAA3B,C,CAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA,eAAe,SAASC,KAAT,GAAkB;AAC/B;;;;;;;;AAQA,QAAMC,IAAI,GAAG;AAAEC,IAAAA,EAAE,EAAE,EAAN;AAAUC,IAAAA,IAAI,EAAE,OAAhB;AAAyBC,IAAAA,GAAG,EAAE;AAA9B,GAAb;AACA,QAAMC,IAAI,GAAG;AAAEH,IAAAA,EAAE,EAAE,EAAN;AAAUC,IAAAA,IAAI,EAAE;AAAhB,GAAb;AAEA,QAAMG,UAAU,GAAGX,WAAW,CAAC,MAAM;AACnC,WAAOY,MAAM,CAACC,MAAP,CAAcP,IAAd,EAAoBI,IAApB,CAAP;AACD,GAF6B,EAE3B,CAACJ,IAAD,EAAOI,IAAP,CAF2B,CAA9B;AAIAI,EAAAA,OAAO,CAACC,GAAR,CAAYJ,UAAU,EAAtB;AAEA,SAAO,GAAP;AACD,C,CAID;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import React, { useReducer, useContext, useMemo, useCallback } from 'react'\nimport { reducer, initialState } from \"./reducers\"\nimport { RESET, ADD } from './constant'\n\n// export default function Counter () {\n//   /**\n//    * useReducer（代替redux）如果页面state复杂（state是一个对象或者state非常多散落在各处）\n//    * @param {Function} 必选 reducer函数\n//    * @param {any} 初始化的state\n//    */\n//   const [state, dispatch] = useReducer(reducer, initialState)\n\n//   return (\n//     <div>\n//       <p>{state.count}</p>\n//       <button onClick={() => dispatch({ type: RESET })}>Reset</button>\n//       <button onClick={() => dispatch({ type: ADD })}>+</button>\n//     </div>\n//   )\n// }\n\n\nexport default function Index () {\n  /**\n   * useCallback 适用于耗时的计算，复杂的业务逻辑（返回值是函数）\n   * @param {Function} 必选 callback\n   * @param {Array} 可选 \n   * 1.不传：每次组件渲染时都调用\n   * 2.传[]：一开始的时候调用\n   * 3.传[state]: state改变时调用\n   */\n  const obj1 = { id: 12, name: 'ouhao', age: '22' }\n  const obj2 = { id: 13, name: 'huimeng' }\n\n  const memoizedFn = useCallback(() => {\n    return Object.assign(obj1, obj2)\n  }, [obj1, obj2])\n\n  console.log(memoizedFn())\n\n  return 123\n}\n\n\n\n// import ChildApp from './childApp'\n// export const MyContext = React.createContext()\n\n// export default function Index (props) {\n\n//   return (\n//     <MyContext.Provider value='inke'>\n//       <ChildApp />\n//     </MyContext.Provider>\n//   )\n// }\n"]},"metadata":{},"sourceType":"module"}