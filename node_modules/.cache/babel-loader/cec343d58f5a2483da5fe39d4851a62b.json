{"ast":null,"code":"// import React, { useReducer, useContext, useMemo, useCallback, useRef, useEffect, useLayoutEffect, useImperativeHandle } from 'react'\nimport { reducer, initialState } from \"./reducers\";\nimport { RESET, ADD } from './constant'; // export default function Counter () {\n//   /**\n//    * useReducer（代替redux）如果页面state复杂（state是一个对象或者state非常多散落在各处）\n//    * @param {Function} 必选 reducer函数\n//    * @param {any} 初始化的state\n//    */\n//   const [state, dispatch] = useReducer(reducer, initialState)\n//   return (\n//     <div>\n//       <p>{state.count}</p>\n//       <button onClick={() => dispatch({ type: RESET })}>Reset</button>\n//       <button onClick={() => dispatch({ type: ADD })}>+</button>\n//     </div>\n//   )\n// }\n\nimport React, { useEffect, useDebugValue } from 'react';\n\nconst useTitle = title => {\n  // useDebugValue(title)\n  useEffect(() => {\n    document.title = title;\n  }, [title]);\n};\n\nexport default function Index() {\n  useTitle('inke');\n  return 123;\n} // import ChildApp from './childApp'\n// export const MyContext = React.createContext()\n// export default function Index (props) {\n//   return (\n//     <MyContext.Provider value='inke'>\n//       <ChildApp />\n//     </MyContext.Provider>\n//   )\n// }","map":{"version":3,"sources":["/Users/ouhao/inke/react-hooks/src/App.js"],"names":["reducer","initialState","RESET","ADD","React","useEffect","useDebugValue","useTitle","title","document","Index"],"mappings":"AAAA;AACA,SAASA,OAAT,EAAkBC,YAAlB,QAAsC,YAAtC;AACA,SAASC,KAAT,EAAgBC,GAAhB,QAA2B,YAA3B,C,CAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA,OAAOC,KAAP,IAAgBC,SAAhB,EAA2BC,aAA3B,QAAgD,OAAhD;;AAEA,MAAMC,QAAQ,GAAGC,KAAK,IAAI;AAExB;AAEAH,EAAAA,SAAS,CAAC,MAAM;AACdI,IAAAA,QAAQ,CAACD,KAAT,GAAiBA,KAAjB;AACD,GAFQ,EAEN,CAACA,KAAD,CAFM,CAAT;AAGD,CAPD;;AASA,eAAe,SAASE,KAAT,GAAkB;AAE/BH,EAAAA,QAAQ,CAAC,MAAD,CAAR;AAEA,SAAO,GAAP;AACD,C,CAID;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["// import React, { useReducer, useContext, useMemo, useCallback, useRef, useEffect, useLayoutEffect, useImperativeHandle } from 'react'\nimport { reducer, initialState } from \"./reducers\"\nimport { RESET, ADD } from './constant'\n\n// export default function Counter () {\n//   /**\n//    * useReducer（代替redux）如果页面state复杂（state是一个对象或者state非常多散落在各处）\n//    * @param {Function} 必选 reducer函数\n//    * @param {any} 初始化的state\n//    */\n//   const [state, dispatch] = useReducer(reducer, initialState)\n\n//   return (\n//     <div>\n//       <p>{state.count}</p>\n//       <button onClick={() => dispatch({ type: RESET })}>Reset</button>\n//       <button onClick={() => dispatch({ type: ADD })}>+</button>\n//     </div>\n//   )\n// }\n\n\nimport React, { useEffect, useDebugValue } from 'react'\n\nconst useTitle = title => {\n\n  // useDebugValue(title)\n\n  useEffect(() => {\n    document.title = title\n  }, [title])\n}\n\nexport default function Index () {\n\n  useTitle('inke')\n\n  return 123\n}\n\n\n\n// import ChildApp from './childApp'\n// export const MyContext = React.createContext()\n\n// export default function Index (props) {\n\n//   return (\n//     <MyContext.Provider value='inke'>\n//       <ChildApp />\n//     </MyContext.Provider>\n//   )\n// }\n"]},"metadata":{},"sourceType":"module"}