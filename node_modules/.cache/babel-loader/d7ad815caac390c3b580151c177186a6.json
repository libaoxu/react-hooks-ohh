{"ast":null,"code":"import _slicedToArray from \"/Users/ouhao/ohh/react-hooks-ohh/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/ouhao/ohh/react-hooks-ohh/src/hooks/10_useLayoutEffect.js\";\nimport React, { useState, useLayoutEffect } from 'react';\nexport default function HookUseLayoutEffect() {\n  const _useState = useState('inke'),\n        _useState2 = _slicedToArray(_useState, 2),\n        name = _useState2[0],\n        setName = _useState2[1];\n  /**\n   * useLayoutEffect 在渲染之前执行（可能会阻止页面渲染）\n   * @param {Function} 必选 callback\n   * @param {Array} 可选 \n   * 1.不传：每次组件渲染时都调用\n   * 2.传[]：commponentDidMount&componentDidUpdate的时候调用\n   * 3.传[state]: state改变时调用\n   */\n\n\n  useLayoutEffect(() => {\n    const rootEl = document.getElementById('root');\n    console.log(rootEl);\n  }, []);\n  return React.createElement(\"button\", {\n    onClick: () => {\n      setName(name + '哈');\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 18\n    },\n    __self: this\n  }, \"name\\u6539\\u53D8\");\n}","map":{"version":3,"sources":["/Users/ouhao/ohh/react-hooks-ohh/src/hooks/10_useLayoutEffect.js"],"names":["React","useState","useLayoutEffect","HookUseLayoutEffect","name","setName","rootEl","document","getElementById","console","log"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,eAA1B,QAAiD,OAAjD;AAEA,eAAe,SAASC,mBAAT,GAAgC;AAAA,oBACrBF,QAAQ,CAAC,MAAD,CADa;AAAA;AAAA,QACtCG,IADsC;AAAA,QAChCC,OADgC;AAE7C;;;;;;;;;;AAQAH,EAAAA,eAAe,CAAC,MAAM;AACpB,UAAMI,MAAM,GAAGC,QAAQ,CAACC,cAAT,CAAwB,MAAxB,CAAf;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAYJ,MAAZ;AACD,GAHc,EAGZ,EAHY,CAAf;AAKA,SAAO;AAAQ,IAAA,OAAO,EAAE,MAAM;AAAED,MAAAA,OAAO,CAACD,IAAI,GAAG,GAAR,CAAP;AAAqB,KAA9C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBAAP;AACD","sourcesContent":["import React, { useState, useLayoutEffect } from 'react'\n\nexport default function HookUseLayoutEffect () {\n  const [name, setName] = useState('inke')\n  /**\n   * useLayoutEffect 在渲染之前执行（可能会阻止页面渲染）\n   * @param {Function} 必选 callback\n   * @param {Array} 可选 \n   * 1.不传：每次组件渲染时都调用\n   * 2.传[]：commponentDidMount&componentDidUpdate的时候调用\n   * 3.传[state]: state改变时调用\n   */\n  useLayoutEffect(() => {\n    const rootEl = document.getElementById('root')\n    console.log(rootEl)\n  }, [])\n\n  return <button onClick={() => { setName(name + '哈') }}>name改变</button>\n}\n"]},"metadata":{},"sourceType":"module"}